#!/bin/sh
# vim: set ft=sh

set -e
set -f

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

union_of_files_from() {
  make_file_query_fragment() {
    jq -r "($1 // [])[]" | escape_backslash_and_apostrophe | sed "s/\(.*\)/file('re:\1')/" | tr '\n' '|' | sed 's/|$//'
  }

  make_file_query_fragment $1 < $payload
}

escape_backslash_and_apostrophe() {
  sed 's/\\/\\\\\\\\/g' | sed "s/'/\\\'/g"
}

get_include_query_fragment() {
  local include_filters=$(union_of_files_from ".source.paths")
  if [ -z "$include_filters" ]; then
    echo "all()"
  else
    echo "$include_filters"
  fi
}

get_exclude_query_fragment() {
  local exclude_filters=$(union_of_files_from ".source.ignore_paths")
  if [ -z "$exclude_filters" ]; then
    # empty list
    echo "not all()"
  else
    echo "$exclude_filters"
  fi
}

main() {
  payload=$TMPDIR/hg-resource-request
  cat > $payload <&0

  load_pubkey $payload
  configure_ssl_verification $payload

  uri=$(jq -r '.source.uri // ""' < $payload)
  branch=$(jq -r '.source.branch // ""' < $payload)
  include_fragment=$(get_include_query_fragment)
  exclude_fragment=$(get_exclude_query_fragment)
  tag_filter=$(cat $payload | jq -r "(.source.tag_filter // \"\")" | escape_backslash_and_apostrophe)
  ref=$(jq -r '.version.ref // ""' < $payload)

  destination=$TMPDIR/hg-resource-repo-cache

  cat $payload >&2

  if [ -d $destination ]; then
    cd $destination
    hg pull -q
    hg checkout -q --clean --rev tip
  else
    if [ -z "$branch" ]; then
      branch="default"
    fi

    hg clone -q --branch "$branch" $uri $destination
    cd $destination
  fi

  if [ -n "$tag_filter" ]; then
    maybe_tag_filter=$(echo "tag('re:$tag_filter')")
  else
    maybe_tag_filter="all()"
  fi

  if [ -n "$ref" ] && check_revision_exists "$ref"; then
    hg log --rev "((descendants($ref) - $ref) & $maybe_tag_filter & (($include_fragment) - ($exclude_fragment))) - desc('[ci skip]')" --template "{node}\n" | jq -R '.' | jq -s "map({ref: .})" >&3
  else
    hg log --rev "last(((($include_fragment) - ($exclude_fragment)) & $maybe_tag_filter) - desc('[ci skip]'))" --template '{node}\n' | jq -R '.' | jq -s "map({ref: .})" >&3
  fi
}

main